use std::env;
use async_std::fs;
use image::GenericImageView;
use crate::{graphics::cpu::operations::Operations, types::pixel::Pixel};

pub async fn load_msh_file_with_texture() -> (Vec<Pixel>, usize) {
    // Open the .msh file generated by executing "gmsh mesh_script.geo" in the command line
    let mut pixels: Vec<Pixel> = vec![];
    let current_dir = env::current_dir().expect("Failed to get current directory");
    
    let mesh_file_path = current_dir.join("src").join("helpers").join("model_helper").join("mesh_output.msh");
    let msh_bytes = fs::read(mesh_file_path).await.unwrap();
    let parser_result = mshio::parse_msh_bytes(msh_bytes.as_slice());

    let texture_file_path = current_dir.join("src").join("helpers").join("model_helper").join("texture.png");
    let img = fs::read(texture_file_path).await.expect("Failed to read image");
    let img = image::load_from_memory(&img).expect("Failed to decode image").to_rgba8();

    let texture_file_path = current_dir.join("src").join("helpers").join("model_helper").join("flower.png");
    let f_img = fs::read(texture_file_path).await.expect("Failed to read image");
    let f_img = image::load_from_memory(&f_img).expect("Failed to decode image").to_rgba8();
    let (f_width, f_height) = f_img.dimensions();

    let width = 800.0;
    let height = 800.0;

    let w_disposition = (width as u32 / 2) - (f_width / 2);
    let h_disposition = (height as u32 / 2) - (f_height / 2) + 60;

    let mut count = 0;

    if let Some(nodes) = parser_result.unwrap().data.nodes {
        for node_block in nodes.node_blocks {
            for node in node_block.nodes {
                let x = node.x as f32;
                let y = node.y as f32;
                let z = node.z as f32;

                let angle_x: f32 = -89.75;
                let angle_y: f32 = 0.0;
                let (rx, ry, rz) = Operations::rotate(angle_x.sin(), angle_y.sin(), angle_x.cos(), angle_y.cos(), x, y, z);
                let (tx, ty) = Operations::project(280.0, 220.0, width, height, rx, ry, rz);
                let rgba = img.get_pixel(tx, ty);

                pixels.push(Pixel {
                    x: rx,
                    y: ry,
                    z: rz,
                    r: rgba[0] as f32 / 255.0,
                    g: rgba[1] as f32 / 255.0,
                    b: rgba[2] as f32 / 255.0,
                    a: rgba[3] as f32 / 255.0,
                    size_factor: 1.7,
                });

                count += 1;
            }
        }
    }

    for i in 0..count {
        let pixel = &mut pixels[i];
        let (tx, ty) = Operations::project(280.0, 220.0, width, height, pixel.x, pixel.y, pixel.z);

        if pixel.z < 0.0 && f_img.in_bounds(tx - w_disposition, ty - h_disposition) {
            let rgba = f_img.get_pixel(tx - w_disposition, ty - h_disposition);
            if rgba[3] != 0 {
                pixel.r = rgba[0] as f32 / 255.0;
                pixel.g = rgba[1] as f32 / 255.0;
                pixel.b = rgba[2] as f32 / 255.0;
                pixel.a = rgba[3] as f32 / 255.0;
            }
        }
    }

    for i in 0..count {
        let pixel = &mut pixels[i];

        let angle_x: f32 = 0.40;
        let angle_y: f32 = 85.0;
        let (rx, ry, rz) = Operations::rotate(angle_x.sin(), angle_y.sin(), angle_x.cos(), angle_y.cos(), pixel.x, pixel.y, pixel.z);
        let (tx, ty) = Operations::project(280.0, 220.0, width, height, rx, ry, rz);

        if rz < 0.0 && f_img.in_bounds(tx - w_disposition, ty - h_disposition) {
            let rgba = f_img.get_pixel(tx - w_disposition, ty - h_disposition);
            if rgba[3] != 0 {
                pixel.r = rgba[0] as f32 / 255.0;
                pixel.g = rgba[1] as f32 / 255.0;
                pixel.b = rgba[2] as f32 / 255.0;
                pixel.a = rgba[3] as f32 / 255.0;
            }
        }
    }

    (pixels, count)
}
